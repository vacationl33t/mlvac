name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  #  build:
  #
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #    - uses: actions/checkout@v4
  #    - name: Set up Python 3.11
  #      uses: actions/setup-python@v3
  #      with:
  #        python-version: "3.11"
  #    - name: Install dependencies
  #      run: |
  #        python -m pip install --upgrade pip
  #        pip install flake8 pytest
  #        if [ -f Backend/requirements.txt ]; then pip install -r Backend/requirements.txt; fi
  #        if [ -f model/requirements.txt ]; then pip install -r model/requirements.txt; fi
  #    - name: Lint with flake8
  #      run: |
  #        # stop the build if there are Python syntax errors or undefined names
  #        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  #        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    runs-on: ubuntu-latest
    #      needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f Backend/requirements.txt ]; then pip install -r Backend/requirements.txt; fi
          if [ -f model/test_requirements.txt ]; then pip install -r model/test_requirements.txt; fi
      - name: Clean up disk space before tests
        run: sudo docker system prune -a -f
      - name: Test Backend with pytest
        run: pytest ./Backend/tests/
      - name: Test ML Service with pytest
        run: pytest ./model/tests/
      - name: Clean up disk space after tests
        run: sudo docker system prune -a -f

  docker_deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push backend Docker image
      - name: Build and push backend Docker image
        run: |
          docker build -t my-backend-image:latest .
          docker tag my-backend-image:latest ${{ secrets.DOCKER_USERNAME }}/my-backend-image:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-backend-image:latest
        working-directory: ./Backend  # Ensure this path is correct

      # Build and push model Docker image
      - name: Build and push model Docker image
        run: |
          docker build -t my-ml-service-image:latest .
          docker tag my-ml-service-image:latest ${{ secrets.DOCKER_USERNAME }}/my-ml-service-image:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-ml-service-image:latest
        working-directory: ./model  # Ensure this path is correct

      # Deploy with docker-compose
      - name: Deploy with docker-compose
        run: docker-compose up -d
        working-directory: ./

  pypi_publish:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build
        working-directory: ./  # Adjust this if your setup.py is not in the root directory

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          password: ${{ secrets.vac }}
          working-directory: ./  # Adjust this if your setup.py is not in the root directory